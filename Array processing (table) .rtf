{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf820
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww14200\viewh15560\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 //programmer: Paulo Dacaya\
\
#include <iostream>\
#include <cstdlib>\
#include <ctime>\
#include <iomanip>\
\
using namespace std;\
\
const int ARR_SIZE = 20;\
\
void fillArray(int arr[]);\
void printArray(const int arr[], int cols);\
double getArrayAverage(const int arr[]); \
int searchArray(int arr[], int num);\
void findLargest (int arr[]);\
void findSmallest (int arr[]);\
void bubbleSortAssending (int arr[], int size);\
void bubbleSortDessending (int arr[], int size);\
\
\
int main() \{\
  \
  int numbers[ARR_SIZE]; \
  int cols; \
  int foundIndex = 0;\
  //int numToSearch = 0;\
  srand(time(0));\
  \
  fillArray(numbers);\
  \
  cout << "Enter the number of columns: ";\
  cin >> cols; \
  cout << endl << endl;\
  \
  printArray(numbers, cols);\
  bubbleSortDessending (numbers, ARR_SIZE);\
  cout << "\\nThis is decending order.\\n";\
  printArray(numbers, cols);\
  \
  bubbleSortAssending (numbers, ARR_SIZE);\
  cout << "\\nThis is accending order.\\n";\
  printArray(numbers, cols);\
  \
  cout << "The average of all elements = " << fixed << setprecision(3) << getArrayAverage(numbers) << endl;\
  \
  //cout << "Enter a number to search:\
  //number to search can change anytime\
  foundIndex = searchArray(numbers, 40);\
  findLargest(numbers);\
  findSmallest(numbers); \
\
  \
  cout << endl;\
  cin.get(); \
  return 0; \
\}\
\
void fillArray(int arr[]) \{\
  for(int i = 0; i < ARR_SIZE; i++) \{\
    arr[i] = rand()%100 + 1;\
  \}\
\}\
\
void printArray(const int arr[], int cols) \{\
  for(int i = 0; i < ARR_SIZE; i++) \{\
    cout << setw(5) << arr[i];\
    if((i+1)%cols == 0)\
      cout << endl;\
  \}\
  cout << endl;\
\}\
\
double getArrayAverage(const int arr[]) \{\
  int sum = 0; \
  double average = 0;\
  \
  for(int i = 0; i < ARR_SIZE; i++) \{\
    sum += arr[i];\
  \}\
  average = static_cast<double>(sum)/ARR_SIZE; \
  return average;\
\}\
\
int searchArray(int arr[], int num) \{\
  for(int i = 0; i < ARR_SIZE; i++) \{\
    if(arr[i] == num)\
      return i;\
  \}\
  return -1;\
\}\
\
void findLargest (int arr[]) \{\
  int high = arr[0];\
  int i = 0; //array subscript \
  while (i < ARR_SIZE) \{\
    if(arr[i] > high)\
      high = arr[i];\
    //end if\
    i++; //check through each element in the array\
  \}\
  cout << "The largest number is: " << high << endl; \
\}\
\
void findSmallest (int arr[]) \{\
  int small = 101; // greater than largest possible number in the rand function.\
  for(int i = 0; i < ARR_SIZE; i++) \{\
    if(arr[i] < small) \
      small = arr[i];\
  \}\
  cout << "The smallest number is: " << small << endl;\
\}\
\
void bubbleSortDessending (int arr[], int size) \{\
  int pass, i, temp;\
  \
  for (pass = 0; pass < size; pass++) \{\
    for(i = 0; i < size - 1; i++) \{\
      if(arr[i] < arr[i + 1]) \{\
        temp = arr[i];\
        arr[i] = arr[i+1];\
        arr[i+1] = temp;\
      \}//end if \
    \}//end nested for\
  \}//end for\
\}\
\
void bubbleSortAssending (int arr[], int size) \{\
  int pass, i, temp;\
  \
  for (pass = 0; pass < size; pass++) \{\
    for(i = 0; i < size - 1; i++) \{\
      if(arr[i] > arr[i + 1]) \{\
        temp = arr[i];\
        arr[i] = arr[i+1];\
        arr[i+1] = temp;\
      \}//end if \
    \}//end nested for\
  \}//end for\
\}}