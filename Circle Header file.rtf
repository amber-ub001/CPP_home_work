{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green116\blue0;\red0\green0\blue0;\red100\green56\blue32;
\red196\green26\blue22;\red170\green13\blue145;\red92\green38\blue153;\red63\green110\blue116;\red28\green0\blue207;
\red38\green71\blue75;\red46\green13\blue110;}
{\*\expandedcolortbl;;\csgenericrgb\c0\c45600\c0;\csgenericrgb\c0\c0\c0;\csgenericrgb\c39100\c22000\c12500;
\csgenericrgb\c77000\c10200\c8600;\csgenericrgb\c66500\c5200\c56900;\csgenericrgb\c35900\c14900\c60100;\csgenericrgb\c24700\c43100\c45600;\csgenericrgb\c11000\c0\c81000;
\csgenericrgb\c14900\c27800\c29400;\csgenericrgb\c18100\c5200\c43100;}
\paperw11900\paperh16840\margl1440\margr1440\vieww28200\viewh16300\viewkind0
\deftab272
\pard\tx272\pardeftab272\pardirnatural\partightenfactor0

\f0\fs22 \cf2 \CocoaLigature0 //  Circle.h\cf3 \
\cf2 //  C++XcodeProgramming\cf3 \
\
\cf4 #include \cf5 <iostream>\cf4 \
#include \cf5 <string>\cf4 \
#include \cf5 <cmath>\cf4 \
\cf3 \
\cf6 using\cf3  \cf6 namespace\cf3  \cf7 std\cf3 ;\
\
\cf6 class\cf3  Circle \{\
\cf6 public\cf3 :\
  Circle(); \cf2 //default constructor.\cf3 \
  Circle(\cf6 double\cf3 ); \cf2 //parameterized constructor.\cf3 \
  \
  \cf2 //access methods.\cf3 \
  \cf6 void\cf3  setRadius(\cf6 double\cf3 ); \cf2 //mutator function.\cf3 \
  \cf6 void\cf3  setColour(\cf7 string\cf3 ); \cf2 //mutator function.\cf3 \
  \cf6 double\cf3  getRadius();\
  \cf7 string\cf3  getColour();\
  \cf6 double\cf3  calcArea();\
  \cf6 bool\cf3  isLargerCircle(\cf8 Circle\cf3 );\
  \
\cf6 private\cf3 :\
  \cf6 double\cf3  radius;\
  \cf7 string\cf3  colour;\
\
  \
\};\
\
\cf2 //function definitions\cf3 \
\cf8 Circle\cf3 ::Circle() \{\
  \cf2 //set variables to a null state.\cf3 \
  \cf8 radius\cf3  = \cf9 1\cf3 ;\
\}\
\
\cf6 void\cf3  \cf8 Circle\cf3 ::setRadius(\cf6 double\cf3  R) \{\
  \cf6 if\cf3  (R > \cf9 1\cf3 )\
    \cf8 radius\cf3  = R;\
\}\
\
\cf6 void\cf3  \cf8 Circle\cf3 ::setColour(\cf7 string\cf3  C) \{\
  \cf8 colour\cf3  = C;\
\}\
\
\cf8 Circle\cf3 ::Circle(\cf6 double\cf3  newRadius) \{\
  \cf10 setRadius\cf3 (newRadius);\
  \cf10 setColour\cf3 (\cf5 "White"\cf3 );\
\}\
\
\cf6 double\cf3  \cf8 Circle\cf3 ::getRadius() \{\
  \cf6 return\cf3  \cf8 radius\cf3 ;\
\}\
\
\cf7 string\cf3  \cf8 Circle\cf3 ::getColour() \{\
  \cf6 return\cf3  \cf8 colour\cf3 ;\
\}\
\
\cf6 double\cf3  \cf8 Circle\cf3 ::calcArea() \{\
  \cf6 return\cf3  \cf4 M_PI\cf3  * \cf11 pow\cf3 (\cf8 radius\cf3 , \cf9 2\cf3 );\
\}\
\
\cf6 bool\cf3  \cf8 Circle\cf3 ::isLargerCircle(\cf8 Circle\cf3  newCircle) \{\
  \cf6 return\cf3  (\cf8 radius\cf3  > newCircle.\cf10 getRadius\cf3 ());\
\}\
\
\
}