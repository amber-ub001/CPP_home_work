{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green116\blue0;\red0\green0\blue0;\red100\green56\blue32;
\red196\green26\blue22;\red170\green13\blue145;\red92\green38\blue153;\red63\green110\blue116;\red28\green0\blue207;
\red46\green13\blue110;}
{\*\expandedcolortbl;;\csgenericrgb\c0\c45600\c0;\csgenericrgb\c0\c0\c0;\csgenericrgb\c39100\c22000\c12500;
\csgenericrgb\c77000\c10200\c8600;\csgenericrgb\c66500\c5200\c56900;\csgenericrgb\c35900\c14900\c60100;\csgenericrgb\c24700\c43100\c45600;\csgenericrgb\c11000\c0\c81000;
\csgenericrgb\c18100\c5200\c43100;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab272
\pard\tx272\pardeftab272\pardirnatural\partightenfactor0

\f0\fs22 \cf2 \CocoaLigature0 //  BankAccount.h\cf3 \
\cf2 //  C++XcodeProgramming\cf3 \
\
\cf4 #include \cf5 <iostream>\cf4 \
#include \cf5 <string>\cf4 \
\cf3 \
\cf6 using\cf3  \cf6 namespace\cf3  \cf7 std\cf3 ;\
\
\cf6 class\cf3  BankAccount \{\
\cf6 public\cf3 :\
  BankAccount(); \cf2 //default constructor.\cf3 \
  \cf2 //must assign varibales before creating an object.\cf3 \
  BankAccount(\cf6 int\cf3 , \cf6 double\cf3 , \cf7 string\cf3 ); \cf2 //parameterized constructor.\cf3 \
  \
  \cf2 //access methods.\cf3 \
  \cf6 bool\cf3  checkPassword(\cf7 string\cf3 );\
  \cf6 double\cf3  getBalance();\
  \cf6 int\cf3  getAccountNum();\
  \cf6 void\cf3  withdraw(\cf6 double\cf3 );\
  \cf6 void\cf3  deposit(\cf6 double\cf3 );\
  \
\cf6 private\cf3 :\
  \cf6 int\cf3  accNumber;\
  \cf6 double\cf3  balance;\
  \cf7 string\cf3  password;\
  \
\};\
\
\cf2 //function definitions.\cf3 \
\
\cf8 BankAccount\cf3 ::BankAccount() \{\
  \cf2 //set variables to a NULL state.\cf3 \
  \cf8 accNumber\cf3  = \cf9 0\cf3 ;\
  \cf8 balance\cf3  = \cf9 0.0\cf3 ;\
  \cf8 password\cf3  = \cf5 ""\cf3 ;\
\}\
\
\cf8 BankAccount\cf3 ::BankAccount(\cf6 int\cf3  accNum, \cf6 double\cf3  bal, \cf7 string\cf3  pass) \{\
  \cf8 accNumber\cf3  = accNum;\
  \cf8 balance\cf3  = bal;\
  \cf8 password\cf3  = pass;\
\}\
\
\cf6 bool\cf3  \cf8 BankAccount\cf3 ::checkPassword(\cf7 string\cf3  attempt) \{\
  \cf6 if\cf3  (attempt == \cf8 password\cf3 )\
    \cf6 return\cf3  \cf6 true\cf3 ;\
  \cf6 else\cf3  \{\
    \cf6 if\cf3  (attempt.\cf10 length\cf3 () != \cf8 password\cf3 .\cf10 length\cf3 ()) \{\
      \cf7 cout\cf3  << \cf5 "Incorrect password, the password must be "\cf3  << \cf8 password\cf3 .\cf10 length\cf3 ()\
        << \cf5 " characters long."\cf3  << \cf10 endl\cf3 ;\
      \cf6 return\cf3  \cf6 false\cf3 ;\
    \}\
    \cf6 return\cf3  \cf6 false\cf3 ;\
  \}\
\}\
\
\cf6 double\cf3  \cf8 BankAccount\cf3 ::getBalance() \{\
  \cf6 return\cf3  \cf8 balance\cf3 ;\
\}\
\
\cf6 void\cf3  \cf8 BankAccount\cf3 ::withdraw(\cf6 double\cf3  amount) \{\
  \cf6 if\cf3 (amount > \cf8 balance\cf3 )\
    \cf7 cout\cf3  << \cf5 "insufficient funds for this operation."\cf3  << \cf10 endl\cf3 ;\
  \cf6 else\cf3 \
    balance -= amount;\
\}\
\
\cf6 void\cf3  BankAccount::deposit(\cf6 double\cf3  amount) \{\
  balance += amount;\
\}\
\
\cf6 int\cf3  BankAccount::getAccountNum() \{\
  \cf6 return\cf3  accNumber;\
\}\
\
\
\
\
\
\
\
}